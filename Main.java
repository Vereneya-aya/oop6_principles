package homework;

public class Main{
    public static void main(String[] args){
        UserService userService = new UserService();
        User u1 = userService.createUser("John");
        userService.saveUser(u1);
        userService.reportUser(u1);
    }
}
// 1. Single Responsibility Principle (SRP): В исходном коде нарушен этот принцип, 
// так как пользователь (User) сам отвечает за своё сохранение и отчёты. 
// Я исправила это, вынеся функции сохранения и отчёта в отдельный класс UserService. 
// Теперь все действия по сохранению и созданию отчётов выполняются через UserService, 
// вызывая методы соответствующих классов.

// 2. Open/Closed Principle (OCP): Принцип был нарушен, потому что изменение метода сохранения (save) 
// требовало модификации класса User. Я вынесла метод save в отдельный класс, 
// и теперь он вызывается через UserService. Теперь если будет необходимо расширить либо модифицировать
//  функцию сохранения её можно будет сделать через соответствующую класс, не изменяя класс User.

// 3. Liskov Substitution Principle (LSP): Принцип был нарушен, так как если в случае когда мы будем создавать типов юзера, 
// они, наследники класса User,могли бы не использовать все методы Юзера или использовать их по-другому, что вызывало бы хаос. 
// Я чётко определила ответственность каждого класса. Теперь, создавая наследников User, 
// можно расширять функциональность UserService, добавляя новые классы или интерфейсы для каждого типа пользователей.

// 4. Interface Segregation Principle (ISP): Этот принцип не был выполнен, 
// так как поведение не было разбито на отдельные классы или интерфейсы. Теперь я выделила поведение 
// в отдельные классы и интерфейсы для каждого типа пользователей. UserService обрабатывает общие методы, 
// а основные функции (сохранение и отчёты) вынесены в отдельные классы.

// 5. Dependency Inversion Principle (DIP): Теперь User зависит от сервиса 
// для вызова методов сохранения и отчётов. Детали сохранения и отчётов обрабатываются 
// отдельными классами Saver и Reporter, а User только вызывает методы сервиса.

// Таким образом, я попробовала понять и применить все принципы SOLID в этом простом коде.
